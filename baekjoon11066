import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.StringTokenizer;
import java.util.Vector;

// https://www.acmicpc.net/problem/11066
public class Main {
	
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
	
	static StringTokenizer st;
	
	static int T, K;
	
	static Vector<Integer> answer = new Vector<Integer>();
	
	public static void main(String[] args) throws IOException {
		
		T = Integer.parseInt(br.readLine());
		
		for(int testCase=0; testCase<T; testCase++) {
			
			int[] novel;
			int[] sum;
			int[][] dp;
			
			K = Integer.parseInt(br.readLine());
			novel = new int[K+1];
			dp = new int[K+1][K+1];
			sum = new int[K+1];
			
			st = new StringTokenizer(br.readLine());
			for(int i=1; i<=K; i++) {
				novel[i] = Integer.parseInt(st.nextToken());
				sum[i] = sum[i-1] + novel[i];
			}
			
			for(int n=1; n<=K; n++) {
				for(int from = 1; from+n<=K; from++) {
					int to = from + n;
					dp[from][to] = Integer.MAX_VALUE;
					for(int divide = from; divide < to; divide++) {
						dp[from][to] = Math.min(dp[from][to], dp[from][divide] + dp[divide+1][to] + sum[to] - sum[from-1]);
					}
				}
			}
			
			answer.add(dp[1][K]);
		}
		
		for(Integer val : answer) {
			bw.append(val+"\n");
		}
		
		bw.flush();
		bw.close();
		br.close();
		
		
	}

}
