import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

// https://www.acmicpc.net/problem/7569
public class Main {
	
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
	
	static int M, N, H;
	
	static int arr[][][];
	static boolean visited[][][];
	
	static int date = 0;
	static int bunch = 0;
	
	static Queue<Integer> queue = new LinkedList<Integer>();
	
	public static void main(String[] args) throws IOException {
		
		String line;
		
		line = br.readLine();
		
		StringTokenizer st = new StringTokenizer(line);
		
		M = Integer.parseInt(st.nextToken());
		N = Integer.parseInt(st.nextToken());
		H = Integer.parseInt(st.nextToken());
		
		arr = new int[H][N][M];
		visited = new boolean[H][N][M];
		
		for(int i=0; i<H; i++) {
			
			for(int j=0; j<N; j++) {
				
				line = br.readLine();
				
				st = new StringTokenizer(line);
				
				for(int k=0; k<M; k++) {
					
					arr[i][j][k] = Integer.parseInt(st.nextToken());
					visited[i][j][k] = false;
				}
				
			}
			
		}
		
		if(isRemained()) {
			for(int i=0; i<H; i++) {
				for(int j=0; j<N; j++) {
					for(int k=0; k<M; k++) {
						if(arr[i][j][k] > 0 && !visited[i][j][k]) {
							queue.add(i);
							queue.add(j);
							queue.add(k);
							bunch++;
						}
					}
				}
			}
			
			bfs();
		}
		
		
		if(isRemained()) {
			date = -1;
		}
		
		
		bw.append(date+"");
		
		bw.flush();
		bw.close();
		
		br.close();
		
	}// end of main 
	
	public static void bfs() {
		
		int x, y, z;
		
		while(!queue.isEmpty() && isRemained()) {
			
			date++;
			
			int tmp = 0;
			
			for(int m=0; m<bunch; m++) {
				
				x = queue.poll();
				y = queue.poll();
				z = queue.poll();
				visited[x][y][z] = true;
				
				// x-1. y, z
				if(x-1>=0 && arr[x-1][y][z]!=-1 && !visited[x-1][y][z]) {
					tmp++;
					queue.add(x-1);
					queue.add(y);
					queue.add(z);
					visited[x-1][y][z] = true;
					arr[x-1][y][z] = 1;
				}
				// x+1, y, z
				if(x+1<H && arr[x+1][y][z]!=-1 && !visited[x+1][y][z]) {
					tmp++;
					queue.add(x+1);
					queue.add(y);
					queue.add(z);
					visited[x+1][y][z] = true;
					arr[x+1][y][z] = 1;
				}
				// x, y-1, z
				if(y-1>=0 && arr[x][y-1][z]!=-1 && !visited[x][y-1][z]) {
					tmp++;
					queue.add(x);
					queue.add(y-1);
					queue.add(z);
					visited[x][y-1][z] = true;
					arr[x][y-1][z] = 1;
				}
				// x, y+1, z
				if(y+1<N && arr[x][y+1][z]!=-1 && !visited[x][y+1][z]) {
					tmp++;
					queue.add(x);
					queue.add(y+1);
					queue.add(z);
					visited[x][y+1][z] = true;
					arr[x][y+1][z] = 1;
				}
				// x, y, z-1
				if(z-1>=0 && arr[x][y][z-1]!=-1 && !visited[x][y][z-1]) {
					tmp++;
					queue.add(x);
					queue.add(y);
					queue.add(z-1);
					visited[x][y][z-1] = true;
					arr[x][y][z-1] = 1;
				}
				// x, y, z+1
				if(z+1<M && arr[x][y][z+1]!=-1 && !visited[x][y][z+1]) {
					tmp++;
					queue.add(x);
					queue.add(y);
					queue.add(z+1);
					visited[x][y][z+1] = true;
					arr[x][y][z+1] = 1;
				}
			}
			
			bunch = tmp;
			
		}
	}
	
	
	
	public static boolean isRemained() {
		
		for(int i=0; i<H; i++) {
			for(int j=0; j<N; j++) {
				for(int k=0; k<M; k++) {
					
					if(arr[i][j][k]==0) {
						return true;
					}
					
				}
			}
		}
		
		return false;
		
	}

}
