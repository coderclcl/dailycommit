import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;

// https://programmers.co.kr/learn/courses/30/lessons/42583?language=java

public class Main {
	
	public static void main(String[] args) {
		
		Solution s = new Solution();
		
		int bridge_length = 2;
		int weight = 10;
		int[] truck_weights = {7,4,5,6};
		
		int answer = s.solution(bridge_length, weight, truck_weights);
		
		System.out.println(answer);
	}

}


class Solution {
    public int solution(int bridge_length, int weight, int[] truck_weights) {
    	
        int answer = 0; // 걸리는 시간 (초)
        int weightSum = 0; // 다리 위에 있는 트럭들 무게 합 
        int weightToAdd = 0;
        
        // 큐를 만든다 (다리 위 트럭들을 의미) 
        Queue<Integer> queue = new LinkedList<Integer>();
        
        // 큐를 만든다 (다리 위 트럭들의 다리 진입시각을 기록)
        Queue<Integer> timeQueue = new LinkedList<Integer>();
        
        // truck_weight는 stack으로 만든다 
        Stack<Integer> truckStack = new Stack<Integer>();
        for(int i=truck_weights.length-1; i>=0; i--) {
        	truckStack.add(truck_weights[i]);
        }
        
        
        while(!truckStack.isEmpty()) {
        
        	answer++;
        	
        	// 끝에 도달한 트럭만 큐에서 뺀다  
        	if(!queue.isEmpty() && answer - timeQueue.peek() == bridge_length) {
        		weightSum -= queue.poll();
        		timeQueue.poll();
        	}
        	
        	// wieght 안 넘게 스택의 트럭들 큐에 넣기 (timeQueue에 진입시각 기록하면서) 
        	if(weightSum + truckStack.peek() <= weight) {
        		weightToAdd = truckStack.pop();
        		queue.add(weightToAdd);
        		timeQueue.add(answer);
        		weightSum += weightToAdd;
        	}
        	
        }
        
        // 마지막 트럭 들어올 때까지 걸리는 시간 체크 
        answer += bridge_length;
        
        return answer;
    }
}


