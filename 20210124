#include <string>
#include <vector>
#include <stdio.h>

using namespace std;
int solution(int bridge_length, int weight, vector<int> truck_weights);
bool isExist(int bridge_length, vector<int> positions);
int getMovingWgt(int bridge_length, vector<int> truck_weights, vector<int> positions);
vector<int> getFirstWaitingTruck(vector<int> truck_weights, vector<int> positions);
int getReguiredTimeOfFirst(int bridge_length, vector<int> positions);
int getReguiredTimeOfLast(int bridge_length, vector<int> positions);

//https://programmers.co.kr/learn/courses/30/lessons/42583


int main(void) {

    int mbridge_length = 100;
    int mweight = 100;
    vector<int> mtruck_weights = { 10,10,10,10,10,10,10,10,10,10 };

    int manswer = solution(mbridge_length, mweight, mtruck_weights);

    printf("%d", manswer);

    return 0;
}


int solution(int bridge_length, int weight, vector<int> truck_weights) {

    int answer = 0;

    // 트럭이 지금 어디를 지나고 있는지 위치 배열을 만든다.(0 으로 초기화해놓고 시작) 
    vector<int> positions;
    for (int i = 0; i < truck_weights.size(); i++) {
        positions.push_back(0);
    }

    // 대기 중인 트럭이 있거나 이동 중인 트럭이 존재하는 동안 계속 진행
    while (isExist(bridge_length, positions)) {

        int wgtSum = 0;
        vector<int> firstWaitingTruck = getFirstWaitingTruck(truck_weights, positions);

        // 대기 중인 트럭이 있을 때 
        if (firstWaitingTruck[1] != -1) {


            // 다음에도 이동 중일 현재 이동중인 트럭들(위치가 1 이상 bridge_length 미만인 트럭들)과 첫 번째 대기 중인 트럭(가장 처음 위치 0인 트럭) 무게를 합한다 
            wgtSum = getMovingWgt(bridge_length, truck_weights, positions) + firstWaitingTruck[0];

            // 무게가 적당하면 answer(시간)++하고, 이동 중인 트럭들(위치가 1 이상인 트럭들)과 첫 번째 대기 중인 트럭(가장 처음 위치 0인 트럭) 위치++한다 
            if (wgtSum <= weight) {

                answer++;

                for (int i = 0; i < positions.size(); i++) {

                    if (positions[i] >= 1) {
                        positions[i]++;
                    }

                }

                positions[firstWaitingTruck[1]]++;

            }

            // 무게가 초과되면 다리 위 맨 첫 번째 트럭(가장 처음 위치 bridge_length 이하인 트럭)이 끝날 때까지(위치가 bridge_length 이상) 시간++하고, 이동 중인 트럭들(위치가 1 이상인 트럭들) 위치++
            else {

                // 다리 위 맨 첫 번째 트럭이 끝나는 시간을 받는다. 
                int time = getReguiredTimeOfFirst(bridge_length, positions);

                answer += time;

                for (int i = 0; i < positions.size(); i++) {

                    if (positions[i] >= 1) {
                        
                        positions[i] += time;

                    }

                }

                wgtSum = getMovingWgt(bridge_length + 1, truck_weights, positions) + firstWaitingTruck[0];

                if (wgtSum <= weight) {
                    positions[firstWaitingTruck[1]]++;

                }

            }

        }

        // 대기 중인 트럭이 없을 때
        else {

            // 다리 위 맨 마지막 트럭이 끝나는 시간을 받는다. 
            int time = getReguiredTimeOfLast(bridge_length, positions);

            // 다리 위 마지막 트럭이 끝날 때까지 (위치가 bridge_length 초과) 시간++하고, 이동 중인 트럭들(위치가 1 이상인 트럭들) 위치++
            answer += time;

            for (int i = 0; i < positions.size(); i++) {

                if (positions[i] >= 1) {

                    positions[i] += time;

                }

            }

        }

    }

    return answer;
}


// 대기 중인 트럭 또는 다리 위 이동 중인 트럭이 존재하는지 알려주는 메서드 
bool isExist(int bridge_length, vector<int> positions) {

    bool flag = false;

    for (int i = 0; i < positions.size(); i++) {
        if (positions[i] <= bridge_length) {
            flag = true;
            break;
        }
    }

    return flag;

}

// 다리 위 이동 중인 트럭들(위치가 1 이상 bridge_length 미만인 트럭들=> bridge_length 인 애는 고려할 필요 없음)의 무게 합을 알려주는 메서드
int getMovingWgt(int bridge_length, vector<int> truck_weights, vector<int> positions) {

    int sum = 0, wgt, pst;

    for (int i = 0; i < truck_weights.size(); i++) {

        wgt = truck_weights[i];
        pst = positions[i];

        if (1 <= pst && pst < bridge_length) {
            sum += wgt;
        }

    }

    return sum;

}



// 첫 번째 대기 중인 트럭의 무게[0]와 인덱스[1]를 알려주는 메서드
vector<int> getFirstWaitingTruck(vector<int> truck_weights, vector<int> positions) {

    int wgt = 0, idx = -1;
    vector<int> firstWaitingTruck;

    for (int i = 0; i < positions.size(); i++) {

        if (positions[i] == 0) {
            wgt = truck_weights[i];
            idx = i;
            break;
        }

    }

    firstWaitingTruck.push_back(wgt);
    firstWaitingTruck.push_back(idx);

    return firstWaitingTruck;


}


// 다리 위 맨 첫 번째 트럭이 끝나는 시간을 받는 메서드(가장 처음 위치 bridge_length 이하인 트럭이 위치가 bridge_length 초과하는데 걸리는 시간 = bridge_length - positions[i] + 1)
int getReguiredTimeOfFirst(int bridge_length, vector<int> positions) {

    int time = 0;

    for (int i = 0; i < positions.size(); i++) {
        
        if (1<= positions[i] && positions[i] <= bridge_length) {

            time = bridge_length - positions[i] + 1;
            break;

        }

    }

    return time;

}



// 다리 위 맨 마지막 트럭이 끝나는 시간을 받는 메서드
int getReguiredTimeOfLast(int bridge_length, vector<int> positions) {

    int time = 0;

    for (int i = positions.size() - 1; i >= 0; i--) {

        if (1 <= positions[i] && positions[i] <= bridge_length) {

            time = bridge_length - positions[i] + 1;
            break;

        }


    }


    return time; 


}
