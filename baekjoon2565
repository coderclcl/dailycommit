import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Arrays;
import java.util.Comparator;
import java.util.StringTokenizer;

// https://www.acmicpc.net/problem/2565

public class Main {
	
	private static int N; // 전깃줄 갯수 
	private static int dp[];
	private static int cost[][];

	public static void main(String[] args) throws IOException {
		
		String line;
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		
		StringTokenizer st;
		
		line = br.readLine();
		
		N = Integer.parseInt(line);
		
		dp = new int[N+1];
		cost = new int[N+1][2];
		
		
		for(int i=1; i<=N; i++) {
			line = br.readLine();
			st = new StringTokenizer(line);
			for(int j=0; j<2; j++) {
				cost[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		
		Arrays.sort(cost, new Comparator<int[]>() {
			
			@Override
			public int compare(int[] a, int[] b) {
					if(a[0] < b[0]) return -1;
					else if(a[0]>b[0]) return 1;
					return 0;
			}
		});
		
		dp[1] = 1;
		
		for(int i=2; i<=N; i++) {
			dp[i] = 1;
			for(int j=1; j<i; j++) {
				if(cost[i][1] > cost[j][1]) {
					dp[i] = Math.max(dp[i], dp[j]+1);
				}
			}
		}
		int max = Integer.MIN_VALUE;
		for(int j=1; j<=N; j++) {
			if(dp[j]>max) {
				max = dp[j];
			}
		}
		
		bw.append(N - max + "");
		
		bw.flush();
		bw.close();
		br.close();
	}
	
	
	

}
