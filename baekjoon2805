import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Arrays;
import java.util.StringTokenizer;

// https://www.acmicpc.net/problem/2805

public class Main {
	
	public static void main(String[] args) throws IOException {
		
		int treesNum;
		long need;
		long result = 0;
		
		String line;
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		
		line = br.readLine();
		
		StringTokenizer st = new StringTokenizer(line);
		
		treesNum = Integer.parseInt(st.nextToken());
		need = Long.parseLong(st.nextToken());
		
		long trees[] = new long[treesNum];
		
		line = br.readLine();
		StringTokenizer st1 = new StringTokenizer(line);
		
		for(int i=0; i<treesNum; i++) {
			trees[i] = Long.parseLong(st1.nextToken());
		}
		
		Arrays.sort(trees);
		
		result = solution(trees, need);
		
		bw.append(result + "");

		bw.flush();
		bw.close();
		br.close();
		
	}

	private static long solution(long[] trees, long need) {
		
		long result = 0, collect;
				
		long min = 0, mid, max = trees[trees.length - 1];
		
		while(min <= max) {
			
			mid = (min + max)/2;
			collect = 0;
			
			for(int i = trees.length - 1; i >= 0; i--) {
			 	
				if(trees[i] - mid > 0) {
					collect += (trees[i] - mid);
				}
			 	
			 	if(collect >= need) {
			 		result = mid;
			 		break;
			 	}
			}
			
			if(collect >= need) {
				min = mid + 1;
			}else {
				max = mid - 1;
			}
			
			//System.out.printf("min : %d, mid : %d, max : %d\n", min, mid, max);
			
		}
		
		return result;
	}

}
